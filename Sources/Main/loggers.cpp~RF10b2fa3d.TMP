#include <QtCore/QString>
#ifdef USE_LOG4QT
#include <log4qt/logmanager.h>
#include <log4qt/consoleappender.h>
#include <log4qt/fileappender.h>
#include <log4qt/logger.h>
#include <log4qt/ttcclayout.h>

#include <QtCore/QFile>


using namespace Log4Qt;

TTCCLayout *		p_ConsoleLayout = NULL;
ConsoleAppender *	p_ConsoleAppender = NULL;
FileAppender *		p_FileDebugAppender = NULL;
FileAppender *		p_FileSlotConnAppender = NULL;
FileAppender *		p_FileGUIAppender = NULL;
#endif 
#ifdef USE_LOG4CPP
#include	<log4cpp/Category.hh>
#include	<log4cpp/FileAppender.hh>
#include	<log4cpp/Win32DebugAppender.hh>
#include	<log4cpp/PatternLayout.hh>
#endif


#define LOG_DIR QString("logs")


void createLoggers()
{

#ifdef USE_LOG4QT
	//QFile stFile("log2.log");
	//stFile.open(QIODevice::WriteOnly | QIODevice::Truncate);
	//stFile.write("createLoggers\n");
	//stFile.flush();

	TTCCLayout *		p_FileLayout = NULL;
	p_FileLayout = new TTCCLayout();
	p_FileLayout->setName(QLatin1String("My Layout"));
	p_FileLayout->activateOptions();
	p_FileLayout->setThreadPrinting(false);
	p_FileLayout->setCategoryPrefixing(false);
	//stFile.write("p_FileLayout utworzone\n");
	//stFile.flush();

	p_ConsoleLayout = new TTCCLayout();
    p_ConsoleLayout->setName(QLatin1String("My Layout"));
    p_ConsoleLayout->activateOptions();
	p_ConsoleLayout->setThreadPrinting(false);
	p_ConsoleLayout->setCategoryPrefixing(false);


	// Create an appender
    p_ConsoleAppender = new ConsoleAppender(p_ConsoleLayout, ConsoleAppender::STDOUT_TARGET);
    p_ConsoleAppender->setName(QLatin1String("My Console Appender"));
    p_ConsoleAppender->activateOptions();

	//////////////////////////////////////////////////////////////////////////
	p_FileDebugAppender = new FileAppender(p_FileLayout, LOG_DIR+"debug.log");
	p_FileDebugAppender->setName(QLatin1String("My Debug Appender"));
	p_FileDebugAppender->activateOptions();
	//////////////////////////////////////////////////////////////////////////
    p_FileSlotConnAppender = new FileAppender(p_FileLayout, LOG_DIR+"slotsConnection.log");
    p_FileSlotConnAppender->setName(QLatin1String("My Appender"));
    p_FileSlotConnAppender->activateOptions();
	//////////////////////////////////////////////////////////////////////////
	p_FileGUIAppender = new FileAppender(p_FileLayout, LOG_DIR+"GUICreation.log");
	p_FileGUIAppender->setName(QLatin1String("My KB Appender"));
	p_FileGUIAppender->activateOptions();
	//////////////////////////////////////////////////////////////////////////
	LogManager::logger("debug")->addAppender(p_ConsoleAppender);
	LogManager::logger("debug")->addAppender(p_FileDebugAppender);
	LogManager::logger("debug")->info("Log started");

	LogManager::logger("GUICreation")->addAppender(p_FileGUIAppender);
	LogManager::logger("GUICreation")->info("Log started");

    LogManager::logger("slotsConnection")->addAppender(p_FileSlotConnAppender);
	LogManager::logger("slotsConnection")->info("Log started");
	//////////////////////////////////////////////////////////////////////////
#endif 
#ifdef USE_LOG4CPP
	log4cpp::PatternLayout* layout1 = new log4cpp::PatternLayout();
	layout1->setConversionPattern("%d %p %c %x: %m%n");

	log4cpp::Appender* debugAppender = new log4cpp::FileAppender("DebugAppender", LOG_DIR+"debug.log",false);
	debugAppender->setLayout(layout1);

	log4cpp::Category &debugCategory = log4cpp::Category::getInstance("debug");
	debugCategory.setAdditivity(false);
	debugCategory.setAppender(debugAppender);
	debugCategory.setPriority(log4cpp::Priority::INFO);

	//////////////////////////////////////////////////////////////////////////
	log4cpp::PatternLayout* layout = new log4cpp::PatternLayout();
	layout->setConversionPattern("%d %p %c %x: %m%n");

	log4cpp::Appender* GUICreationAppender = new log4cpp::FileAppender("GUICreationAppender", LOG_DIR+"GUICreation.log",false);
	GUICreationAppender->setLayout(layout);

	log4cpp::Category &process_cat = log4cpp::Category::getInstance("Process");
	process_cat.setAdditivity(false);
	process_cat.setAppender(processAppender);
	process_cat.setPriority(log4cpp::Priority::INFO);
	//////////////////////////////////////////////////////////////////////////
	log4cpp::Appender* busMasterAppender = new log4cpp::FileAppender("BusMasterAppender", LOG_DIR+"mathematical.log",false);
	log4cpp::PatternLayout* layout2 = new log4cpp::PatternLayout();
	layout2->setConversionPattern("%d %p %c %x: %m%n");
	busMasterAppender->setLayout(layout2);

	log4cpp::Category &math_cat = log4cpp::Category::getInstance("Mathematical");
	math_cat.setAdditivity(false);
	math_cat.setAppender(busMasterAppender);
	math_cat.setPriority(log4cpp::Priority::INFO);

	log4cpp::Appender* RP3GuiApp = new log4cpp::FileAppender("RP3GUIDev", LOG_DIR+"RP3GuiDev.log",false);
	log4cpp::PatternLayout* RP3GuiLayout = new log4cpp::PatternLayout();
	RP3GuiLayout->setConversionPattern("%d %p %c %x: %m%n");
	RP3GuiApp->setLayout(RP3GuiLayout);

	log4cpp::Category &RP3GuiCategory = log4cpp::Category::getInstance("RP3GuiDev");
	RP3GuiCategory.setAppender(RP3GuiApp);
	RP3GuiCategory.setPriority(log4cpp::Priority::INFO);
#endif
}
void destroyLoggers()
{
#ifdef USE_LOG4QT
	QList<Appender*> lApplist = LogManager::logger("debug")->appenders();
	LogManager::logger("debug")->removeAllAppenders();
	//for(QList<Appender*>::iterator iterApp = lApplist.begin();iterApp != lApplist.end();iterApp++)
	//{
	//	Appender* app = *iterApp;
	//	delete app;
	//}
	lApplist = LogManager::logger("GUICreation")->appenders();
	LogManager::logger("GUICreation")->removeAllAppenders();
	//for(QList<Appender*>::iterator iterApp = lApplist.begin();iterApp != lApplist.end();iterApp++)
	//{
	//	Appender* app = *iterApp;
	//	delete app;
	//}

	lApplist = LogManager::logger("slotsConnection")->appenders();
	LogManager::logger("slotsConnection")->removeAllAppenders();
	//for(QList<Appender*>::iterator iterApp = lApplist.begin();iterApp != lApplist.end();iterApp++)
	//{
	//	Appender* app = *iterApp;
	//	delete app;
	//}
	//delete p_ConsoleLayout;
	//delete p_ConsoleAppender;
	//delete p_FileDebugAppender;
	//delete p_FileDebugAppender;
	//delete p_FileSlotConnAppender;
	//delete p_FileGUIAppender;
#endif
}


void printErrorLog(QString strLog)
{
#ifdef USE_LOG4QT
	Log4Qt::LogManager::logger("debug")->error(strLog);
#else
#endif
}
void printDebugLog(QString strLog)
{
#ifdef USE_LOG4QT
	Log4Qt::LogManager::logger("debug")->debug(strLog);
#else
#endif
}
void printGUICreationLog(QString strLog)
{
#ifdef USE_LOG4QT
	Log4Qt::LogManager::logger("GUICreation")->debug(strLog);
#else
#endif
}
void printSlotsConnectionLog(QString strLog)
{
#ifdef USE_LOG4QT
	Log4Qt::LogManager::logger("slotsConnection")->debug(strLog);
#else
#endif
}

